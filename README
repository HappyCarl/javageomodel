source: http://brunofuster.wordpress.com/2010/09/21/javageomodel-with-objectify/

<a href="http://code.google.com/apis/maps/articles/geospatial.html">GeoModel</a> is an useful p<a href="http://code.google.com/apis/maps/articles/geospatial.html">GeoModel</a> is an useful project (originally in python) ported to java which aims to make your life easier when you want to search near by coordinates in maps using bigtable as storage. 

The only thing is that <a href="http://code.google.com/p/javageomodel/">javageomodel</a> is too coupled with JPA/JDO and I want to use <a href="http://code.google.com/p/objectify-appengine/">Objectify</a>. Well, there's too much code that can be refactored, but this simple change satisfied my needs:

proximityFetch #old
List&lt;T&gt; proximityFetch(Point center, int maxResults, double maxDistance, Class&lt;T&gt; entityClass, <strong>GeocellQuery baseQuery, PersistenceManager pm</strong>)

proximityFetch #new
List&lt;T&gt; proximityFetch(Point center, int maxResults, double maxDistance, <strong>LocationCapableRepositorySearch&lt;T&gt; repositorySearch</strong>)

If you want to search over your LocationCapable entities, you should give a LocationCapableRepositorySearch&lt;T&gt; for javageomodel (ofy sample):

[sourcecode language="java"]
public class OfyEntityLocationCapableRepositorySearchImpl implements
		LocationCapableRepositorySearch<Entity> {

	private Objectify ofy;

	public EntityLocationCapableRepositorySearchImpl(Objectify ofy) {
		this.ofy = ofy;
	}

	@Override
	public List<Entity> search(List<String> geocells) {
		return ofy.query(Entity.class)
				.filter("coordinates.geocells in ", geocells).list();
	}

}
[/sourcecode]

You might be looking for GeocellQuery. You could just change your LocationCapableRepositorySearch constructor waiting for a query and add some new filters to your search.

Now an Objectify proximity search looks like:
[sourcecode language="java"]
LocationCapableRepositorySearch<Entity> ofySearch = 
                    new OfyEntityLocationCapableRepositorySearchImpl(ofy);

List<Entity> entities = GeocellManager.proximityFetch(center, 20, 1000, ofySearch);
[/sourcecode]

and I've created a JPALocationCapableRepositorySearchImpl for JPA searches:

[sourcecode language="java"]
LocationCapableRepositorySearch<Entity> jpaSearch = 
                    new JPALocationCapableRepositorySearchImpl<Entity>(baseQuery, pm, Entity.class);

List<Entity> entities = GeocellManager.proximityFetch(center, 40, 1000, jpaSearch);
[/sourcecode]

You can find the new source at <a href="http://github.com/bfuster/javageomodel">http://github.com/bfuster/javageomodel</a>roject (originally in python) ported to java which aims to make your life easier when you want to search near by coordinates in maps using bigtable as storage. 

The only thing is that <a href="http://code.google.com/p/javageomodel/">javageomodel</a> is too coupled with JPA/JDO and I want to use <a href="http://code.google.com/p/objectify-appengine/">Objectify</a>. Well, there's too much code that can be refactored, but this simple change satisfied my needs:

proximityFetch #old
List&lt;T&gt; proximityFetch(Point center, int maxResults, double maxDistance, Class&lt;T&gt; entityClass, <strong>GeocellQuery baseQuery, PersistenceManager pm</strong>)

proximityFetch #new
List&lt;T&gt; proximityFetch(Point center, int maxResults, double maxDistance, <strong>LocationCapableRepositorySearch&lt;T&gt; repositorySearch</strong>)

If you want to search over your LocationCapable entities, you should give a LocationCapableRepositorySearch&lt;T&gt; for javageomodel (ofy sample):

[sourcecode language="java"]
public class OfyEntityLocationCapableRepositorySearchImpl implements
		LocationCapableRepositorySearch<Entity> {

	private Objectify ofy;

	public EntityLocationCapableRepositorySearchImpl(Objectify ofy) {
		this.ofy = ofy;
	}

	@Override
	public List<Entity> search(List<String> geocells) {
		return ofy.query(Entity.class)
				.filter("coordinates.geocells in ", geocells).list();
	}

}
[/sourcecode]

You might be looking for GeocellQuery. You could just change your LocationCapableRepositorySearch constructor waiting for a query and add some new filters to your search.

Now an Objectify proximity search looks like:
[sourcecode language="java"]
LocationCapableRepositorySearch<Entity> ofySearch = 
                    new OfyEntityLocationCapableRepositorySearchImpl(ofy);

List<Entity> entities = GeocellManager.proximityFetch(center, 20, 1000, ofySearch);
[/sourcecode]

and I've created a JPALocationCapableRepositorySearchImpl for JPA searches:

[sourcecode language="java"]
LocationCapableRepositorySearch<Entity> jpaSearch = 
                    new JPALocationCapableRepositorySearchImpl<Entity>(baseQuery, pm, Entity.class);

List<Entity> entities = GeocellManager.proximityFetch(center, 40, 1000, jpaSearch);
[/sourcecode]

You can find the new source at <a href="http://github.com/bfuster/javageomodel">http://github.com/bfuster/javageomodel</a>
